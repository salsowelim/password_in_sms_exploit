import * as React from 'react';
import { ScrollView, TouchableOpacity, Alert, Text, Button, PermissionsAndroid, View, StyleSheet } from 'react-native';
import RNSimData from 'react-native-sim-data'
import SmsAndroid from 'react-native-get-sms-android';
import { Table, TableWrapper, Row, Cell,Rows } from 'react-native-table-component';
import RNRestart from 'react-native-restart'; 

export default class App extends React.Component {

// black list words are words that appear in SMSs with potentially exposed permanent passwords 
// white list words are words that appear in SMSs with temporary passwords 
black_list_words= ["password", "pass word", "كلمة المرور", "كلمة السر", "الرقم السري", "رقمك السري"];
white_list_words =["otp", "code", "temp", "one time", "تعيين","مؤقت","استعادة"];

_alertIndex(index) {
    Alert.alert("Message Details",this.state.tableData[index][1]);
  }

constructor(props) {
    super(props);
      this.state = {
      status: 0, // check render() function for status flags meaning
      tableHead: ['Msg Source', 'Msg Text'],
      tableData: []
    };
  }
 runSimData() {
  // https://github.com/pocesar/react-native-sim-data/issues/13
  try {
    RNSimData.getSimInfo().phoneNumber0;
  } catch(e) {
    console.log("restarting")
    // restart app
    console.log(e)
    RNRestart.Restart();
  }
  }

check_permissions = async function() {
    const user_choices = await PermissionsAndroid.requestMultiple([
        PermissionsAndroid.PERMISSIONS.READ_PHONE_STATE,
        PermissionsAndroid.PERMISSIONS.READ_SMS]);
    if ((user_choices['android.permission.READ_SMS'] == 'granted') &&
      (user_choices['android.permission.READ_PHONE_STATE'] == 'granted')) {
        this.runSimData();
        return true;
    }else{
      return false;
    }
  };

  search_sms = () => {
    this.setState({tableData: [],});
    var filter = {
      box: 'inbox', 
      maxCount: 10000,
    };
  that = this;
  SmsAndroid.list(
  JSON.stringify(filter),
  (fail) => {
    that.setState({ status: 4,}); 
  },
  (count, smsList) => {
    var arr = JSON.parse(smsList);
    localdata = [];
    unique_sources = [];
    arr.forEach(function(object) {
      // if object.body contains a black list word AND not a whitelist word, add to table  
      if (that.black_list_words.some(substring=>object.body.toLowerCase().includes(substring))){
        if (that.white_list_words.some(substring=>object.body.toLowerCase().includes(substring)) != true){
              if (unique_sources.some(substring=>object.address.includes(substring)) != true){
                localdata.push([object.address,object.body]);
                unique_sources.push(object.address);
              }
        }
      }
    });
    if (unique_sources.length > 0 ) { 
       that.setState({
              status: 2,
              tableData: localdata,
        }); 
    }else{
      //nothing found
         that.setState({
              status: 5,
        }); 
    }
    },
  );
};

  start_search = () => {
    var that = this;
    this.check_permissions ().then(function (didGetPermission: boolean) {
        if (didGetPermission) {
            that.setState({
              status: 1,
            });            
            that.search_sms();
          } else {
             that.setState({
              status: 3,
            });
          }
        });
  };

  render() {
    const state = this.state;
    const element = (data, index) => (
      <TouchableOpacity onPress={() => this._alertIndex(index)}>
        <View style={styles.btn}>
          <Text style={styles.btnText}>Press for details</Text>
        </View>
      </TouchableOpacity>
    );
    // status flags = 0: welcome screen, 1: loading, 2: show results, 3: permission error, 4: some strange error, 5: no results.
     if (this.state.status == 0){  
      // welcome screen
      return (  <View style={[{flex: 1}]}>
        <View style={[{flex: 1}]} >
            <Text style={[styles.title]}>Hello</Text>
        </View>
        <View style={[{flex: 2}]} >
        <Text style={[styles.welcome]}>This app will try to search for SMS messages that contain exposed plaintext permanent passwords, then display them for you. The app needs two permissions: read phone and sms.</Text>
        <Text style={[styles.welcome2]}>Note: the app might need to restart after granted permission for the first time.</Text>
        </View>
        <View style={[{flex: 2}]} >
        <View style={[{ margin: 20 }]}>
         <Button style={[styles.welcome]}
          title="Start Now"
          color="#36579f"
          onPress={ this.start_search }
        />
        </View>

        </View>
      </View>);
    }else if (this.state.status == 1){
      // loading
        return (  <View style={[{flex: 1}]}>
        <View style={[{flex: 1}]} >
        </View>
        <View style={[{flex: 2}]} >
        <Text style={[styles.welcome]}>Searching now. Please wait. </Text>
        </View>
        <View style={[{flex: 2}]} >
        </View>
      </View>);

    }else if (this.state.status == 2){
      //showing results
       return (  <View style={[{flex: 1}]}>
        <View style={[{flex: 1}]} >  
        <Text style={[styles.title]}>Results </Text> 
        </View>
        <View style={[{flex: 5}]} >
        <Text style={[styles.welcome]}>
        Your phone number is: {RNSimData.getTelephoneNumber()}
        </Text>
         <Text style={[styles.welcome]}>
         Next table is listing messages potentially exposed your passwords:
        </Text>

        <ScrollView style={styles.container}>

       <Table borderStyle={{borderWidth: 1}}>
          <Row data={state.tableHead} style={styles.head} textStyle={styles.text}/>
          {
            state.tableData.map((rowData, index) => (
              <TableWrapper key={index} style={styles.row}>
                {
                  rowData.map((cellData, cellIndex) => (
                    <Cell key={cellIndex} data={cellIndex === 1 ? element(cellData, index) : cellData} textStyle={styles.text}/>
                  ))
                }
              </TableWrapper>
            ))
          }
        </Table>


        </ScrollView>

        </View>

        <View style={[{flex: 1}]} >
        <View style={[{ margin: 20 }]}>
         <Button style={[styles.welcome]}
          title="Start again"
          color="#36579f"
          onPress={ () => { this.setState({status: 0});} }
        />
        </View>
        </View>
      </View>);
    }
    else if (this.state.status == 3){
      //permission error
         return (  <View style={[{flex: 1}]}>
        <View style={[{flex: 1}]} ></View>
        <View style={[{flex: 4}]} >
        <Text style={[styles.welcome]}>
        permissions not granted. Try to grant them using your phone settings then reload the app.
        </Text>
        </View>
        <View style={[{flex: 1}]} >
        <View style={[{ margin: 20 }]}>
         <Button style={[styles.welcome]}
          title="Start again"
          color="#36579f"
          onPress={ () => { this.setState({status: 0});} }
        />
        </View>
        </View>
      </View>);
    } else if (this.state.status == 4){
      // strange error
         return (  <View style={[{flex: 1}]}>
        <View style={[{flex: 1}]} ></View>
        <View style={[{flex: 4}]} >
        <Text style={[styles.welcome]}>
        Some error happened
        </Text>
        </View>

        <View style={[{flex: 1}]} >
        <View style={[{ margin: 20 }]}>
         <Button style={[styles.welcome]}
          title="Start again"
          color="#36579f"
          onPress={ () => { this.setState({status: 0});} }
        />
        </View>
        </View>
      </View>);
    } else if (this.state.status == 5){
      //no results
         return (  <View style={[{flex: 1}]}>
        <View style={[{flex: 1}]} ></View>
        <View style={[{flex: 4}]} >
        <Text style={[styles.welcome]}>
          No results! 
        </Text>
        </View>
        <View style={[{flex: 1}]} >
        <View style={[{ margin: 20 }]}>
         <Button style={[styles.welcome]}
          title="Start again"
          color="#36579f"
          onPress={ () => { this.setState({status: 0});} }
        />
        </View>
        </View>
      </View>);
    }
  }
}

const styles = StyleSheet.create({
  welcome: {fontSize: 20,textAlign: "center",margin: 10,},
  welcome2: {fontSize: 11,textAlign: "center",margin: 10,},
  title: {fontSize: 28,textAlign: "center",margin: 20, fontWeight: "bold",color: "#36579f"},
  button: {borderRadius: 100,margin: 10},
  container: { flex: 1, padding: 16, paddingTop: 30 },
  head: { height: 40 },
  text: { margin: 6 },
  row: { flexDirection: 'row'},
  btn: { width: 110, height: 20,  backgroundColor: '#36579f', borderRadius: 2 },
  btnText: { textAlign: 'center', color: '#fff' }
});

